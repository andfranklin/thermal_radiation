from .quadrature_1d import get_gauss_legendre_pairs, Quadrature
from itertools import product
from math import factorial
from .geometry import about_zero

class QuadrilateralGaussLegendre2D(Quadrature):
    def __init__(self, n_qps_x, n_qps_y):
        x_qps, x_weights = get_gauss_legendre_pairs(n_qps_x)
        y_qps, y_weights = get_gauss_legendre_pairs(n_qps_y)
        self.qps = list(product(x_qps, y_qps))
        self.weights = [x_weight * y_weight for x_weight, y_weight in product(x_weights, y_weights)]


class TriangleTensorProductGaussLegendre2D(QuadrilateralGaussLegendre2D):
    """
    Triangle Tensor Product quadratures are derived by remapping the
    quadrilateral domain to the triangular domain and using the quadrilateral
    quadrature.

    Advantages:
      Arbitrary 1D quad rules can be extended to higher dimensions and used for
        the triangle
      Straight forward derivation
      Extremely high-order polynomials may be evaluated
    Disadvantages:
      Inefficient for high N
      Relatively large number of quadrature points for the polynomial accuracy
      Unsymmetrical distribuation of quadrature points -- aesthetically undesirable

    6 x 6 runs in about the same time as TriangleSymmetricalGauss2D(13)
    """
    def __init__(self, n_qps_x, n_qps_y):
        QuadrilateralGaussLegendre2D.__init__(self, n_qps_x, n_qps_y)

        def quad_domain_to_func_domain(x, y):
            """
            Mapping from the quadrilateral domain to the triangular domain
            """
            xi = 0.25 * (1 + x) * (1 - y)
            eta = 0.5 * (1 + y)
            return xi, eta

        self.quad_domain_to_func_domain = quad_domain_to_func_domain

        new_weights = []
        for (x, y), weight in zip(self.qps, self.weights):
            xi, eta = quad_domain_to_func_domain(x, y)
            new_weights.append(weight * 0.25 * (1 - eta))
        self.weights = new_weights

    def compute(self, func):
        def remapped_func(x, y):
            xi, eta = self.quad_domain_to_func_domain(x, y)
            return func(xi, eta)

        return QuadrilateralGaussLegendre2D.compute(self, remapped_func)


# Symmetric Gauss Triangle quadratures (Dunavant)
# Weights sum to 1. To get proper quadrature, weights must be divided by 2.
symmetrical_gauss_map = {
    1 : [ # dim(P_n) = 3
        ((0.3333333333333333, 0.3333333333333333), 1.0)
    ],
    2 : [ # dim(P_n) = 6
        ((0.1666666666666667, 0.1666666666666667), 0.3333333333333333),
        ((0.6666666666666666, 0.1666666666666667), 0.3333333333333333),
        ((0.1666666666666667, 0.6666666666666666), 0.3333333333333333)
    ],
    3 : [ # dim(P_n) = 10
        ((0.3333333333333333, 0.3333333333333333), -0.5625000000000000),
        ((0.2000000000000000, 0.6000000000000000), 0.5208333333333334),
        ((0.2000000000000000, 0.2000000000000000), 0.5208333333333334),
        ((0.6000000000000000, 0.2000000000000000), 0.5208333333333334)
    ],
    4 : [ # dim(P_n) = 15
        ((0.445948490915965, 0.445948490915965), 0.223381589678011),
        ((0.445948490915965, 0.108103018168070), 0.223381589678011),
        ((0.108103018168070, 0.445948490915965), 0.223381589678011),
        ((0.091576213509771, 0.091576213509771), 0.109951743655322),
        ((0.091576213509771, 0.816847572980459), 0.109951743655322),
        ((0.816847572980459, 0.091576213509771), 0.109951743655322)
    ],
    5 : [ # dim(P_n) = 21
        ((0.333333333333333, 0.333333333333333), 0.225000000000000),
        ((0.470142064105115, 0.470142064105115), 0.132394152788506),
        ((0.470142064105115, 0.059715871789770), 0.132394152788506),
        ((0.059715871789770, 0.470142064105115), 0.132394152788506),
        ((0.101286507323456, 0.101286507323456), 0.125939180544827),
        ((0.101286507323456, 0.797426985353087), 0.125939180544827),
        ((0.797426985353087, 0.101286507323456), 0.125939180544827)
    ],
    6 : [ # dim(P_n) = 28
        ((0.249286745170910, 0.249286745170910), 0.116786275726379),
        ((0.249286745170910, 0.501426509658179), 0.116786275726379),
        ((0.501426509658179, 0.249286745170910), 0.116786275726379),
        ((0.063089014491502, 0.063089014491502), 0.050844906370207),
        ((0.063089014491502, 0.873821971016996), 0.050844906370207),
        ((0.873821971016996, 0.063089014491502), 0.050844906370207),
        ((0.310352451033784, 0.636502499121399), 0.082851075618374),
        ((0.636502499121399, 0.053145049844817), 0.082851075618374),
        ((0.053145049844817, 0.310352451033784), 0.082851075618374),
        ((0.636502499121399, 0.310352451033784), 0.082851075618374),
        ((0.310352451033784, 0.053145049844817), 0.082851075618374),
        ((0.053145049844817, 0.636502499121399), 0.082851075618374),
    ],
    7 : [ # dim(P_n) = 36
        ((0.333333333333333, 0.333333333333333), -0.149570044467682),
        ((0.260345966079040, 0.260345966079040), 0.175615257433208),
        ((0.260345966079040, 0.479308067841920), 0.175615257433208),
        ((0.479308067841920, 0.260345966079040), 0.175615257433208),
        ((0.065130102902216, 0.065130102902216), 0.053347235608838),
        ((0.065130102902216, 0.869739794195568), 0.053347235608838),
        ((0.869739794195568, 0.065130102902216), 0.053347235608838),
        ((0.312865496004874, 0.638444188569810), 0.077113760890257),
        ((0.638444188569810, 0.048690315425316), 0.077113760890257),
        ((0.048690315425316, 0.312865496004874), 0.077113760890257),
        ((0.638444188569810, 0.312865496004874), 0.077113760890257),
        ((0.312865496004874, 0.048690315425316), 0.077113760890257),
        ((0.048690315425316, 0.638444188569810), 0.077113760890257),
    ],
    8 : [ # dim(P_n) = 45
        ((0.333333333333333, 0.333333333333333), 0.144315607677787),
        ((0.459292588292723, 0.459292588292723), 0.095091634267285),
        ((0.459292588292723, 0.081414823414554), 0.095091634267285),
        ((0.081414823414554, 0.459292588292723), 0.095091634267285),
        ((0.170569307751760, 0.170569307751760), 0.103217370534718),
        ((0.170569307751760, 0.658861384496480), 0.103217370534718),
        ((0.658861384496480, 0.170569307751760), 0.103217370534718),
        ((0.050547228317031, 0.050547228317031), 0.032458497623198),
        ((0.050547228317031, 0.898905543365938), 0.032458497623198),
        ((0.898905543365938, 0.050547228317031), 0.032458497623198),
        ((0.263112829634638, 0.728492392955404), 0.027230314174435),
        ((0.728492392955404, 0.008394777409958), 0.027230314174435),
        ((0.008394777409958, 0.263112829634638), 0.027230314174435),
        ((0.728492392955404, 0.263112829634638), 0.027230314174435),
        ((0.263112829634638, 0.008394777409958), 0.027230314174435),
        ((0.008394777409958, 0.728492392955404), 0.027230314174435)
    ],
    9 : [ # dim(P_n) = 55
        ((0.333333333333333, 0.333333333333333), 0.097135796282799),
        ((0.489682519198738, 0.489682519198738), 0.031334700227139),
        ((0.489682519198738, 0.020634961602525), 0.031334700227139),
        ((0.020634961602525, 0.489682519198738), 0.031334700227139),
        ((0.437089591492937, 0.437089591492937), 0.077827541004774),
        ((0.437089591492937, 0.125820817014127), 0.077827541004774),
        ((0.125820817014127, 0.437089591492937), 0.077827541004774),
        ((0.188203535619033, 0.188203535619033), 0.079647738927210),
        ((0.188203535619033, 0.623592928761935), 0.079647738927210),
        ((0.623592928761935, 0.188203535619033), 0.079647738927210),
        ((0.044729513394453, 0.044729513394453), 0.025577675658698),
        ((0.044729513394453, 0.910540973211095), 0.025577675658698),
        ((0.910540973211095, 0.044729513394453), 0.025577675658698),
        ((0.221962989160766, 0.741198598784498), 0.043283539377289),
        ((0.741198598784498, 0.036838412054736), 0.043283539377289),
        ((0.036838412054736, 0.221962989160766), 0.043283539377289),
        ((0.741198598784498, 0.221962989160766), 0.043283539377289),
        ((0.221962989160766, 0.036838412054736), 0.043283539377289),
        ((0.036838412054736, 0.741198598784498), 0.043283539377289)
    ],
    10: [ # dim(P_n) = 66
        ((0.333333333333333, 0.333333333333333), 0.090817990382754),
        ((0.485577633383657, 0.485577633383657), 0.036725957756467),
        ((0.485577633383657, 0.028844733232685), 0.036725957756467),
        ((0.028844733232685, 0.485577633383657), 0.036725957756467),
        ((0.109481575485037, 0.109481575485037), 0.045321059435528),
        ((0.109481575485037, 0.781036849029926), 0.045321059435528),
        ((0.781036849029926, 0.109481575485037), 0.045321059435528),
        ((0.307939838764121, 0.550352941820999), 0.072757916845420),
        ((0.550352941820999, 0.141707219414880), 0.072757916845420),
        ((0.141707219414880, 0.307939838764121), 0.072757916845420),
        ((0.550352941820999, 0.307939838764121), 0.072757916845420),
        ((0.307939838764121, 0.141707219414880), 0.072757916845420),
        ((0.141707219414880, 0.550352941820999), 0.072757916845420),
        ((0.246672560639903, 0.728323904597411), 0.028327242531057),
        ((0.728323904597411, 0.025003534762686), 0.028327242531057),
        ((0.025003534762686, 0.246672560639903), 0.028327242531057),
        ((0.728323904597411, 0.246672560639903), 0.028327242531057),
        ((0.246672560639903, 0.025003534762686), 0.028327242531057),
        ((0.025003534762686, 0.728323904597411), 0.028327242531057),
        ((0.066803251012200, 0.923655933587500), 0.009421666963733),
        ((0.923655933587500, 0.009540815400299), 0.009421666963733),
        ((0.009540815400299, 0.066803251012200), 0.009421666963733),
        ((0.923655933587500, 0.066803251012200), 0.009421666963733),
        ((0.066803251012200, 0.009540815400299), 0.009421666963733),
        ((0.009540815400299, 0.923655933587500), 0.009421666963733)
    ],
    # Can't have quadrature rules for >11 because you begin to generate quadrature points outside the domain
    11 : [ # dim(P_n) = 78
        ((0.534611048270758, 0.534611048270758), 0.000927006328961),
        ((0.534611048270758, -0.069222096541517), 0.000927006328961),
        ((-0.069222096541517, 0.534611048270758), 0.000927006328961),
        ((0.398969302965855, 0.398969302965855), 0.077149534914813),
        ((0.398969302965855, 0.202061394068290), 0.077149534914813),
        ((0.202061394068290, 0.398969302965855), 0.077149534914813),
        ((0.203309900431282, 0.203309900431282), 0.059322977380774),
        ((0.203309900431282, 0.593380199137435), 0.059322977380774),
        ((0.593380199137435, 0.203309900431282), 0.059322977380774),
        ((0.119350912282581, 0.119350912282581), 0.036184540503418),
        ((0.119350912282581, 0.761298175434837), 0.036184540503418),
        ((0.761298175434837, 0.119350912282581), 0.036184540503418),
        ((0.032364948111276, 0.032364948111276), 0.013659731002678),
        ((0.032364948111276, 0.935270103777448), 0.013659731002678),
        ((0.935270103777448, 0.032364948111276), 0.013659731002678),
        ((0.356620648261293, 0.593201213428213), 0.052337111962204),
        ((0.593201213428213, 0.050178138310495), 0.052337111962204),
        ((0.050178138310495, 0.356620648261293), 0.052337111962204),
        ((0.593201213428213, 0.356620648261293), 0.052337111962204),
        ((0.356620648261293, 0.050178138310495), 0.052337111962204),
        ((0.050178138310495, 0.593201213428213), 0.052337111962204),
        ((0.171488980304042, 0.807489003159792), 0.020707659639141),
        ((0.807489003159792, 0.021022016536166), 0.020707659639141),
        ((0.021022016536166, 0.171488980304042), 0.020707659639141),
        ((0.807489003159792, 0.171488980304042), 0.020707659639141),
        ((0.171488980304042, 0.021022016536166), 0.020707659639141),
        ((0.021022016536166, 0.807489003159792), 0.020707659639141)
    ],
    12 : [ # dim(P_n) = 91
        ((0.488217389773805, 0.488217389773805), 0.025731066440455),
        ((0.488217389773805, 0.023565220452390), 0.025731066440455),
        ((0.023565220452390, 0.488217389773805), 0.025731066440455),
        ((0.439724392294460, 0.439724392294460), 0.043692544538038),
        ((0.439724392294460, 0.120551215411079), 0.043692544538038),
        ((0.120551215411079, 0.439724392294460), 0.043692544538038),
        ((0.271210385012116, 0.271210385012116), 0.062858224217885),
        ((0.271210385012116, 0.457579229975768), 0.062858224217885),
        ((0.457579229975768, 0.271210385012116), 0.062858224217885),
        ((0.127576145541586, 0.127576145541586), 0.034796112930709),
        ((0.127576145541586, 0.744847708916828), 0.034796112930709),
        ((0.744847708916828, 0.127576145541586), 0.034796112930709),
        ((0.021317350453210, 0.021317350453210), 0.006166261051559),
        ((0.021317350453210, 0.957365299093579), 0.006166261051559),
        ((0.957365299093579, 0.021317350453210), 0.006166261051559),
        ((0.275713269685514, 0.608943235779788), 0.040371557766381),
        ((0.608943235779788, 0.115343494534698), 0.040371557766381),
        ((0.115343494534698, 0.275713269685514), 0.040371557766381),
        ((0.608943235779788, 0.275713269685514), 0.040371557766381),
        ((0.275713269685514, 0.115343494534698), 0.040371557766381),
        ((0.115343494534698, 0.608943235779788), 0.040371557766381),
        ((0.281325580989940, 0.695836086787803), 0.022356773202303),
        ((0.695836086787803, 0.022838332222257), 0.022356773202303),
        ((0.022838332222257, 0.281325580989940), 0.022356773202303),
        ((0.695836086787803, 0.281325580989940), 0.022356773202303),
        ((0.281325580989940, 0.022838332222257), 0.022356773202303),
        ((0.022838332222257, 0.695836086787803), 0.022356773202303),
        ((0.116251915907597, 0.858014033544073), 0.017316231108659),
        ((0.858014033544073, 0.025734050548330), 0.017316231108659),
        ((0.025734050548330, 0.116251915907597), 0.017316231108659),
        ((0.858014033544073, 0.116251915907597), 0.017316231108659),
        ((0.116251915907597, 0.025734050548330), 0.017316231108659),
        ((0.025734050548330, 0.858014033544073), 0.017316231108659)
    ],
    13 : [
        (( 0.333333333333333,  0.333333333333333),  0.052520923400802),
        (( 0.495048184939705,  0.495048184939705),  0.011280145209330),
        (( 0.009903630120591,  0.495048184939705),  0.011280145209330),
        (( 0.495048184939705,  0.009903630120591),  0.011280145209330),
        (( 0.468716635109574,  0.468716635109574),  0.031423518362454),
        (( 0.062566729780852,  0.468716635109574),  0.031423518362454),
        (( 0.468716635109574,  0.062566729780852),  0.031423518362454),
        (( 0.414521336801277,  0.414521336801277),  0.047072502504194),
        (( 0.170957326397447,  0.414521336801277),  0.047072502504194),
        (( 0.414521336801277,  0.170957326397447),  0.047072502504194),
        (( 0.229399572042831,  0.229399572042831),  0.047363586536355),
        (( 0.541200855914337,  0.229399572042831),  0.047363586536355),
        (( 0.229399572042831,  0.541200855914337),  0.047363586536355),
        (( 0.114424495196330,  0.114424495196330),  0.031167529045794),
        (( 0.771151009607340,  0.114424495196330),  0.031167529045794),
        (( 0.114424495196330,  0.771151009607340),  0.031167529045794),
        (( 0.024811391363459,  0.024811391363459),  0.007975771465074),
        (( 0.950377217273082,  0.024811391363459),  0.007975771465074),
        (( 0.024811391363459,  0.950377217273082),  0.007975771465074),
        (( 0.268794997058761,  0.636351174561660),  0.036848402728732),
        (( 0.636351174561660,  0.094853828379579),  0.036848402728732),
        (( 0.094853828379579,  0.268794997058761),  0.036848402728732),
        (( 0.636351174561660,  0.268794997058761),  0.036848402728732),
        (( 0.268794997058761,  0.094853828379579),  0.036848402728732),
        (( 0.094853828379579,  0.636351174561660),  0.036848402728732),
        (( 0.291730066734288,  0.690169159986905),  0.017401463303822),
        (( 0.690169159986905,  0.018100773278807),  0.017401463303822),
        (( 0.018100773278807,  0.291730066734288),  0.017401463303822),
        (( 0.690169159986905,  0.291730066734288),  0.017401463303822),
        (( 0.291730066734288,  0.018100773278807),  0.017401463303822),
        (( 0.018100773278807,  0.690169159986905),  0.017401463303822),
        (( 0.126357385491669,  0.851409537834241),  0.015521786839045),
        (( 0.851409537834241,  0.022233076674090),  0.015521786839045),
        (( 0.022233076674090,  0.126357385491669),  0.015521786839045),
        (( 0.851409537834241,  0.126357385491669),  0.015521786839045),
        (( 0.126357385491669,  0.022233076674090),  0.015521786839045),
        (( 0.022233076674090,  0.851409537834241),  0.015521786839045)
    ]
}

def is_point_in_triangle(x, y):
    above_x_axis = x <= 1.0 and x >= 0.0
    above_y_axis = y <= 1.0 and y >= 0.0
    below_hypotenuse = x + y <= 1.0
    return above_x_axis and above_y_axis and below_hypotenuse

def points_in_domain(quad_rule):
    weight_sum = 0.0
    for point, weight in quad_rule:
        weight_sum += weight
        if not is_point_in_triangle(*point):
            return False
    if about_zero(1.0 - weight_sum):
        return True
    else:
        return False

def points_in_domain_and_positive_weights(quad_rule):
    weight_sum = 0.0
    for point, weight in quad_rule:
        if weight < 0.0:
            return False

        weight_sum += weight

        if not is_point_in_triangle(*point):
            return False
    if about_zero(1.0 - weight_sum):
        return True
    else:
        return False

def vet_gauss_map(gauss_map, criteria, loud=False):
    vetted_gauss_map = {}

    for order, quad_rule in gauss_map.items():
        if criteria(quad_rule):
            if loud: print(order, "valid")
            for i in range(1, order + 1):
                if i not in vetted_gauss_map:
                    if loud: print("inserting", order, "for", i)
                    vetted_gauss_map[i] = quad_rule

    return vetted_gauss_map

vetted_symmetrical_gauss_map = vet_gauss_map(symmetrical_gauss_map, points_in_domain_and_positive_weights)

class TriangleSymmetricalGauss2D(Quadrature):
    """
    13 runs in about the same time as TriangleTensorProductGaussLegendre2D(6, 6)
    """
    def __init__(self, n_qps):
        qps_weights = vetted_symmetrical_gauss_map[n_qps]

        qps = []; weights = []
        for qp, weight in qps_weights:
            qps.append(qp)
            weights.append(0.5 * weight)

        self.qps = qps
        self.weights = weights

        def quad_domain_to_func_domain(xi, eta):
            return xi, eta

        self.quad_domain_to_func_domain = quad_domain_to_func_domain

def integral_value(i, j):
    return (factorial(i) * factorial(j)) / factorial(i + j + 2)


if __name__ == '__main__':
    import matplotlib.pyplot as plt
    i, j = 3, 0

    def get_func(i, j):
        return lambda x, y : (x ** i) * (y ** j)

    func = get_func(i, j)

    quad = QuadrilateralGaussLegendre2D(3, 3)
    print(quad.compute(func))

    quad = TriangleTensorProductGaussLegendre2D(3, 3)
    print(quad.compute(func))
    print(integral_value(i, j))

    def plot_qps(number):
        plt.plot([0, 1], [0, 0], color='blue')
        plt.plot([1, 0], [0, 1], color='blue')
        plt.plot([0, 0], [1, 0], color='blue')

        weight_sum = 0.0
        qps_xs = []
        qps_ys = []
        for qp, weight in vetted_symmetrical_gauss_map[number]:
            weight_sum += weight
            qps_xs.append(qp[0])
            qps_ys.append(qp[1])
        plt.scatter(qps_xs, qps_ys)

        print(f"P_N({number}) weight sum = {weight_sum}\n")
        plt.title(f"$P_N({number})$")
        plt.show()

    for i in range(1, len(vetted_symmetrical_gauss_map) + 1):
        plot_qps(i)

    # def print_quad_point(x, y, w):
    #     print(f"(({x:>18.15f}, {y:>18.15f}), {w:>18.15f}),")
    #
    # def unpack_quad_info(weight, point_info):
    #     if len(point_info) == 1:
    #         print_quad_point(point_info[0], point_info[0], weight)
    #         return 1
    #     elif len(point_info) == 2:
    #         print_quad_point(point_info[1], point_info[1], weight)
    #         print_quad_point(point_info[0], point_info[1], weight)
    #         print_quad_point(point_info[1], point_info[0], weight)
    #         return 3
    #     else:
    #         alpha, beta, gamma = point_info
    #         print_quad_point(beta , gamma, weight)
    #         print_quad_point(gamma, alpha, weight)
    #         print_quad_point(alpha,  beta, weight)
    #         print_quad_point(gamma,  beta, weight)
    #         print_quad_point(beta,  alpha, weight)
    #         print_quad_point(alpha, gamma, weight)
    #         return 6
    #
    # def unpack_complete_quad_info(infos):
    #     n_qps = 0
    #     for weight, point_info in infos:
    #         n_qps += unpack_quad_info(weight, point_info)
    #     print("\n nqps =", n_qps)
    #
    # print("N=13")
    # unpack_complete_quad_info([
    #     (0.052520923400802, [1/3]),
    #     (0.011280145209330, [0.009903630120591, 0.495048184939705]),
    #     (0.031423518362454, [0.062566729780852, 0.468716635109574]),
    #     (0.047072502504194, [0.170957326397447, 0.414521336801277]),
    #     (0.047363586536355, [0.541200855914337, 0.229399572042831]),
    #     (0.031167529045794, [0.771151009607340, 0.114424495196330]),
    #     (0.007975771465074, [0.950377217273082, 0.024811391363459]),
    #     (0.036848402728732, [0.094853828379579, 0.268794997058761, 0.636351174561660]),
    #     (0.017401463303822, [0.018100773278807, 0.291730066734288, 0.690169159986905]),
    #     (0.015521786839045, [0.022233076674090, 0.126357385491669, 0.851409537834241])
    # ])
